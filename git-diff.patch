diff --git a/README.md b/README.md
index e121c59..7b7b054 100644
--- a/README.md
+++ b/README.md
@@ -3,13 +3,33 @@ My Awesome Shell setup
 
 [![Netlify Status](https://api.netlify.com/api/v1/badges/53c0a9d3-abb4-4d92-9e5a-fcfe58029542/deploy-status)](https://app.netlify.com/sites/sh-jles-work/deploys)
 
+## Minimal Install
+
+This is a minimal install. It will install:
+* [oh-my-zsh](https://github.com/ohmyzsh/ohmyzsh)
+* [starship](https://starship.rs/)
+* [azure cli](https://docs.microsoft.com/en-us/cli/azure/install-azure-cli-linux?pivots=apt)
+
 ## Usage
 
 Use this one-liner to install:
 
 **Linux, MacOS**
 ```bash
-/bin/bash -c "$(curl -fsSL https://sh.jles.work)"
+# wget
+wget -O - https://sh.jles.work | sudo bash
+
+# curl
+sudo /bin/bash -c "$(curl -fsSL https://sh.jles.work)"
+```
+
+For minimal install:
+```bash
+# wget
+wget -O - https://sh.jles.work | MINIMAL_INSTALL=true sudo bash
+
+# curl
+MINIMAL_INSTALL=true /bin/bash -c "$(curl -fsSL https://sh.jles.work)"
 ```
 
 **Windows**
diff --git a/dotfiles/zshrc_linux b/dotfiles/zshrc_linux
index 7ae4c14..ba34fe8 100644
--- a/dotfiles/zshrc_linux
+++ b/dotfiles/zshrc_linux
@@ -1,20 +1,45 @@
+# Basic settings
 ZSH_DISABLE_COMPFIX=true
-export PATH=$HOME/.cargo/bin:$HOME/brew/bin:/usr/local/bin:/usr/local/go/bin:$PATH:$HOME/bin
 export ZSH="$HOME/.oh-my-zsh"
 ZSH_THEME="mh"
 DISABLE_UNTRACKED_FILES_DIRTY="true"
+
+# Path configuration
+path=(
+  $HOME/.cargo/bin
+  $HOME/brew/bin
+  /usr/local/bin
+  /usr/local/go/bin
+  $PATH
+  $HOME/bin
+)
+export PATH
+
+# Oh My Zsh configuration
 plugins=(git)
 source $ZSH/oh-my-zsh.sh
+
+# Completions
 fpath=(/usr/local/share/zsh-completions $fpath)
+
+# Aliases
 alias ll='lsd -lh'
 alias ls='lsd'
 alias tree='ls --tree'
 alias gl='git log --graph --decorate --pretty=oneline --abbrev-commit'
 alias gs='git status --renames'
-# The next line updates PATH for the Google Cloud SDK.
-source $HOME/google-cloud-sdk/path.zsh.inc
 
-# The next line enables zsh completion for gcloud.
-source $HOME/google-cloud-sdk/completion.zsh.inc
-eval "$(direnv hook zsh)"
-eval "$(starship init zsh)"
+# Google Cloud SDK
+if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then
+  source "$HOME/google-cloud-sdk/path.zsh.inc"
+fi
+if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then
+  source "$HOME/google-cloud-sdk/completion.zsh.inc"
+fi
+
+# Additional tools
+for tool in direnv starship; do
+  if command -v $tool &> /dev/null; then
+    eval "$($tool hook zsh)"
+  fi
+done
diff --git a/install/index.sh b/install/index.sh
index 5875f9a..830df0c 100755
--- a/install/index.sh
+++ b/install/index.sh
@@ -1,124 +1,216 @@
 #!/usr/bin/env bash
 
-# Requires: curl, zsh, unzip
-# Recommended: homebrew on mac or linux
-
-OS=""
-if [ "$(uname)" == "Darwin" ]; then
-    OS="mac"
-elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
-    OS="linux"
-fi
-
-echo "Installing applications..."
-mkdir -p $HOME/bin
-
-if [ "${OS}" != "" ]; then
+set -euo pipefail
+
+# Check for minimal installation flag
+MINIMAL_INSTALL=${MINIMAL_INSTALL:-false}
+
+# Global versions
+GO_VERSION="1.21.5"
+NODE_VERSION="20.10.0"
+GOOGLE_CLOUD_SDK_VERSION="457.0.0"
+NERD_FONT_VERSION="3.1.1"
+LSD_VERSION="0.23.1"
+FZF_VERSION="0.42.0"
+
+# Determine OS
+OS=$(uname -s)
+case "${OS}" in
+    Darwin*) OS="mac" ;;
+    Linux*)  OS="linux" ;;
+    *)       echo "Unsupported OS: ${OS}"; exit 1 ;;
+esac
+
+# Check and install prerequisites
+install_prerequisites() {
+    echo "Checking and installing prerequisites..."
     if [ "${OS}" == "mac" ]; then
-        BREW=$(which brew)
-        if [ "${BREW}" == "" ]; then
-            echo "Setting up homebrew..."
-            NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
-            if [ $? -eq 0 ]; then
-                eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
-            fi
-            BREW=$(which brew)
+        # macOS uses Homebrew
+        if ! command -v brew &> /dev/null; then
+            install_homebrew
         fi
-
-        echo "Installing Rust ..."
-        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
-
-        echo "Installing Nerd Fonts..."
-        NERD_FONT_VERSION="3.1.1"
-        curl -L -o "/tmp/FantasqueSansMono.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/v${NERD_FONT_VERSION}/FantasqueSansMono.zip" && unzip -o /tmp/FantasqueSansMono.zip -d $HOME/Library/Fonts
-
-        if [ "${BREW}" != "" ]; then
-            echo "Using homebrew to install cmake..."
-            ${BREW} install cmake
+        brew install curl zsh unzip
+    elif [ "${OS}" == "linux" ]; then
+        if [ -f /etc/alpine-release ]; then
+            # Alpine Linux
+            sudo apk add --no-cache curl zsh unzip
+        else
+            # Assume Debian-based
+            sudo apt-get update
+            sudo apt-get install -y curl zsh unzip
         fi
+    fi
+}
 
-        echo "Installing Starship ..."
-        $HOME/.cargo/bin/cargo install starship --locked
+# Common functions
+install_homebrew() {
+    echo "Setting up homebrew..."
+    NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
+    if [ "${OS}" == "mac" ]; then
+        eval "$(/opt/homebrew/bin/brew shellenv)"
+    else
+        eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
+    fi
+    brew analytics off
+}
+
+install_rust() {
+    echo "Installing Rust..."
+    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
+}
+
+install_starship() {
+    echo "Installing Starship..."
+    $HOME/.cargo/bin/cargo install starship --locked
+}
+
+install_common_brew_packages() {
+    brew analytics off
+    brew install git kubectl kubectx terraform lsd helm kubecm fzf gpg2 gsed az zsh ansible just go-task direnv
+    brew install cloudflare/cloudflare/cloudflared
+    brew tap azure/bicep
+    brew install bicep
+}
+
+install_oh_my_zsh() {
+    echo "Installing Oh-My-Zsh..."
+    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
+}
+
+fetch_dotfiles() {
+    echo "Fetching dotfiles..."
+    curl -L -o $HOME/.zshrc "https://sh.jles.work/dotfiles/zshrc_${OS}"
+    if [ "${OS}" == "mac" ]; then
+        curl -L -o $HOME/.alacritty.toml https://sh.jles.work/dotfiles/alacritty.toml
+    fi
+}
 
-        GO_VERSION="1.21.5"
-        echo "Installing Go ${GO_VERSION} ..."
+configure_starship() {
+    echo "Configuring Starship preset..."
+    $HOME/.cargo/bin/starship preset pastel-powerline -o ~/.config/starship.toml
+}
+
+install_go() {
+    echo "Installing Go ${GO_VERSION}..."
+    if [ "${OS}" == "mac" ]; then
         curl -L -o "/tmp/go${GO_VERSION}.darwin-amd64.pkg" "https://go.dev/dl/go${GO_VERSION}.darwin-amd64.pkg" && sudo installer -pkg "/tmp/go${GO_VERSION}.darwin-amd64.pkg" -target /
+    elif [ "${OS}" == "linux" ]; then
+        curl -L "https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz" | sudo tar -C /usr/local -xzf -
+    fi
+}
 
-        NODE_VERSION="20.10.0"
-        echo "Installing Node ${NODE_VERSION} ..."
+install_node() {
+    echo "Installing Node ${NODE_VERSION}..."
+    if [ "${OS}" == "mac" ]; then
         curl -L -o "/tmp/node-v${NODE_VERSION}.pkg" "https://nodejs.org/dist/v${NODE_VERSION}/node-v${NODE_VERSION}.pkg" && sudo installer -pkg "/tmp/node-v${NODE_VERSION}.pkg" -target /
+    elif [ "${OS}" == "linux" ]; then
+        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash - && sudo apt-get install -y nodejs
+    fi
+}
 
-        GOOGLE_CLOUD_SDK_VERSION="457.0.0"
-        echo "Installing Google Cloud SDK ${GOOGLE_CLOUD_SDK_VERSION} ..."
+install_google_cloud_sdk() {
+    echo "Installing Google Cloud SDK ${GOOGLE_CLOUD_SDK_VERSION}..."
+    if [ "${OS}" == "mac" ]; then
         curl -L "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-${GOOGLE_CLOUD_SDK_VERSION}-darwin-x86_64.tar.gz" | tar -xz -C $HOME
-
-        if [ "${BREW}" != "" ]; then
-            echo "Using homebrew to install apps..."
-            ${BREW} analytics off
-            ${BREW} install git kubectl kubectx terraform lsd helm kubecm fzf alacritty gpg2 gsed az openlens zsh ansible just go-task direnv
-            ${BREW} install cloudflare/cloudflare/cloudflared
-            ${BREW} install --cask visual-studio-code
-            ${BREW} install --cask vscodium
-            ${BREW} tap azure/bicep
-            ${BREW} install bicep
-            ${BREW} install --cask powershell
-            pwsh -Command "Install-Module -Name Az -Repository PSGallery -Force"
-        else
-            echo "Warning: Homebrew not found on path. Apps may not be installed."
-        fi
-
-        echo "Configuring 1Password SSH Agent..."
-        export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock
-
     elif [ "${OS}" == "linux" ]; then
-        NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
-        if [ $? -eq 0 ]; then
-            eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
-        fi
-        BREW=$(which brew)
-        echo "Installing Rust ..."
-        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
-
-        if [ "${BREW}" != "" ]; then
-            echo "Using homebrew to install cmake..."
-            ${BREW} install cmake
-        fi
-
-        echo "Installing Starship ..."
-        $HOME/.cargo/bin/cargo install starship --locked
-
-        if [ "${BREW}" != "" ]; then
-            echo "Using homebrew..."
-            ${BREW} install kubectl kubectx terraform lsd helm kubecm fzf golang gpg2 gsed az zsh ansible just go-task direnv
-            ${BREW} install cloudflare/cloudflare/cloudflared
-            ${BREW} tap azure/bicep
-            ${BREW} install bicep
-            ${BREW} install --cask powershell
-            pwsh -Command "Install-Module -Name Az -Repository PSGallery -Force"
-        else
-            echo "Warning: Homebrew not found on path. Apps may not be installed."
+        curl -L "https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-${GOOGLE_CLOUD_SDK_VERSION}-linux-x86_64.tar.gz" | tar -xz -C $HOME
+    fi
+}
+
+# OS-specific installations
+install_mac_specific() {
+    echo "Installing Nerd Fonts..."
+    curl -L -o "/tmp/FantasqueSansMono.zip" "https://github.com/ryanoasis/nerd-fonts/releases/download/v${NERD_FONT_VERSION}/FantasqueSansMono.zip" && unzip -o /tmp/FantasqueSansMono.zip -d $HOME/Library/Fonts
+
+    brew install alacritty
+    brew install --cask visual-studio-code vscodium powershell
+    pwsh -Command "Install-Module -Name Az -Repository PSGallery -Force"
+
+    echo "Configuring 1Password SSH Agent..."
+    export SSH_AUTH_SOCK=~/Library/Group\ Containers/2BUA8C4S2C.com.1password/t/agent.sock
+}
+
+install_linux_specific() {
+    brew install cmake
+    # Import the public repository GPG keys
+    curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
+    # Register the Microsoft Ubuntu repository
+    sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" > /etc/apt/sources.list.d/microsoft.list'
+    # Update the list of products
+    sudo apt-get update
+    # Install PowerShell
+    sudo apt-get install -y powershell
+    pwsh -Command "Install-Module -Name Az -Repository PSGallery -Force"
+}
+
+install_minimal() {
+    echo "Performing minimal installation..."
+
+    # Install Oh My Zsh
+    install_oh_my_zsh
+
+    # Install Starship
+    curl -sS https://starship.rs/install.sh | sh -s -- --yes
+
+    # Install lsd
+    LSD_FILENAME="lsd-${LSD_VERSION}-x86_64-unknown-linux-gnu.tar.gz"
+    curl -L "https://github.com/Peltoche/lsd/releases/download/${LSD_VERSION}/${LSD_FILENAME}" | tar xzf - -C /tmp
+    sudo mv /tmp/lsd-*/lsd /usr/local/bin/
+
+    # Install fzf
+    FZF_FILENAME="fzf-${FZF_VERSION}-linux_amd64.tar.gz"
+    curl -L "https://github.com/junegunn/fzf/releases/download/${FZF_VERSION}/${FZF_FILENAME}" | tar xzf - -C /tmp
+    sudo mv /tmp/fzf /usr/local/bin/
+
+    # Install Azure CLI
+    if [ "${OS}" == "mac" ]; then
+        # Ensure Homebrew is installed on macOS
+        if ! command -v brew &> /dev/null; then
+            install_homebrew
         fi
+        brew install azure-cli
+    elif [ "${OS}" == "linux" ]; then
+        curl -sL https://aka.ms/InstallAzureCli | sudo bash
     fi
-fi
 
-echo "Installing Oh-My-Zsh..."
-sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
-
-echo "Fetching dotfiles..."
+    # Fetch dotfiles
+    fetch_dotfiles
+
+    # Configure Starship
+    starship preset pastel-powerline -o ~/.config/starship.toml
+}
+
+# Main installation process
+main() {
+    echo "Installing applications..."
+    mkdir -p $HOME/bin
+
+    install_prerequisites
+
+    if [ "$MINIMAL_INSTALL" = true ]; then
+        echo "Performing minimal installation..."
+        install_minimal
+    else
+        install_homebrew
+        install_rust
+        install_starship
+        install_common_brew_packages
+        install_go
+        install_node
+        install_google_cloud_sdk
+
+        if [ "${OS}" == "mac" ]; then
+            install_mac_specific
+        elif [ "${OS}" == "linux" ]; then
+            install_linux_specific
+        fi
 
-if [ "${OS}" != "" ]; then
-    if [ "${OS}" == "mac" ]; then
-        echo " - zshrc (mac)"
-        curl -L -o $HOME/.zshrc https://sh.jles.work/dotfiles/zshrc_mac
-    elif [ "${OS}" == "linux" ]; then
-        echo " - zshrc (linux)"
-        curl -L -o $HOME/.zshrc https://sh.jles.work/dotfiles/zshrc_linux
+        install_oh_my_zsh
+        fetch_dotfiles
+        configure_starship
     fi
-fi
-echo " - alacritty"
-curl -L -o $HOME/.alacritty.yml https://sh.jles.work/dotfiles/alacritty.yml
 
-echo "Configuring Starship preset..."
-$HOME/.cargo/bin/starship preset pastel-powerline -o ~/.config/starship.toml
+    echo "Done."
+}
 
-echo "Done."
+main
